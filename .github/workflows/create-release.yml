name: Create GitHub Release

on:
  push:
    branches:
      - main  # Triggers on pushes to main branch

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Find DMG files and extract version
      id: find_dmg
      run: |
        # Find all DMG files matching SwiftGPT-*.dmg pattern
        DMG_FILES=$(ls SwiftGPT-*.dmg 2>/dev/null || echo "")
        
        if [ -z "$DMG_FILES" ]; then
          echo "❌ No SwiftGPT-*.dmg files found"
          echo "dmg_exists=false" >> $GITHUB_OUTPUT
          echo "Available files:"
          ls -la
          exit 0
        fi
        
        # Get the first (and hopefully only) DMG file
        DMG_FILE=$(echo "$DMG_FILES" | head -n 1)
        echo "✅ Found DMG: $DMG_FILE"
        
        # Extract version from filename (SwiftGPT-1.1.dmg -> 1.1)
        VERSION=$(echo "$DMG_FILE" | sed 's/SwiftGPT-\(.*\)\.dmg/\1/')
        
        echo "dmg_exists=true" >> $GITHUB_OUTPUT
        echo "dmg_file=$DMG_FILE" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT
        
        echo "📦 DMG File: $DMG_FILE"
        echo "🏷️  Version: $VERSION"
        echo "🏷️  Tag: v$VERSION"
        
    - name: Check if release already exists
      id: check_release
      run: |
        TAG="v${{ steps.find_dmg.outputs.version }}"
        
        # Check if release already exists
        RELEASE_EXISTS=$(gh release view "$TAG" --json id 2>/dev/null | jq -r '.id // empty' || echo "")
        
        if [ -n "$RELEASE_EXISTS" ]; then
          echo "release_exists=true" >> $GITHUB_OUTPUT
          echo "🔄 Release $TAG already exists (ID: $RELEASE_EXISTS)"
          echo "ℹ️  Skipping release creation"
        else
          echo "release_exists=false" >> $GITHUB_OUTPUT
          echo "✨ Release $TAG does not exist, will create new release"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create Release
      if: steps.find_dmg.outputs.dmg_exists == 'true' && steps.check_release.outputs.release_exists == 'false'
      id: create_release
      run: |
        TAG="${{ steps.find_dmg.outputs.tag }}"
        VERSION="${{ steps.find_dmg.outputs.version }}"
        DMG_FILE="${{ steps.find_dmg.outputs.dmg_file }}"
        
        # Create release with GitHub CLI
        gh release create "$TAG" "$DMG_FILE" \
          --title "SwiftGPT $VERSION" 
        
        echo "✅ Release $TAG created successfully!"
        echo "📦 DMG uploaded: $DMG_FILE"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Summary
      run: |
        if [ "${{ steps.find_dmg.outputs.dmg_exists }}" == "false" ]; then
          echo "❌ No DMG files found!"
          echo "💡 Make sure you have a SwiftGPT-*.dmg file in the repository"
          echo "📁 Current files:"
          ls -la
        elif [ "${{ steps.check_release.outputs.release_exists }}" == "true" ]; then
          echo "ℹ️  Release v${{ steps.find_dmg.outputs.version }} already exists"
          echo "📦 DMG: ${{ steps.find_dmg.outputs.dmg_file }}"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.find_dmg.outputs.version }}"
        else
          echo "✅ New release v${{ steps.find_dmg.outputs.version }} created successfully!"
          echo "📦 DMG uploaded: ${{ steps.find_dmg.outputs.dmg_file }}"
          echo "🌐 GitHub Pages will update automatically with the new appcast.xml"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.find_dmg.outputs.version }}"
        fi
