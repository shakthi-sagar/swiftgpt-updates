name: Create GitHub Release

on:
  push:
    branches:
      - main  # Triggers on pushes to main branch

permissions:
  contents: write
  pull-requests: read

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Find DMG files and extract version
      id: find_dmg
      run: |
        # Find all DMG files matching SwiftGPT-*.dmg pattern
        DMG_FILES=$(ls SwiftGPT-*.dmg 2>/dev/null || echo "")
        
        if [ -z "$DMG_FILES" ]; then
          echo "❌ No SwiftGPT-*.dmg files found"
          echo "dmg_exists=false" >> $GITHUB_OUTPUT
          echo "Available files:"
          ls -la
          exit 0
        fi
        
        # Get the first (and hopefully only) DMG file
        DMG_FILE=$(echo "$DMG_FILES" | head -n 1)
        echo "✅ Found DMG: $DMG_FILE"
        
        # Extract version from filename (SwiftGPT-1.1.dmg -> 1.1)
        VERSION=$(echo "$DMG_FILE" | sed 's/SwiftGPT-\(.*\)\.dmg/\1/')
        
        echo "dmg_exists=true" >> $GITHUB_OUTPUT
        echo "dmg_file=$DMG_FILE" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT
        
        echo "📦 DMG File: $DMG_FILE"
        echo "🏷️  Version: $VERSION"
        echo "🏷️  Tag: v$VERSION"
        
    - name: Check if release already exists
      id: check_release
      run: |
        TAG="v${{ steps.find_dmg.outputs.version }}"
        
        # Check if release already exists
        RELEASE_EXISTS=$(gh release view "$TAG" --json id 2>/dev/null | jq -r '.id // empty' || echo "")
        
        if [ -n "$RELEASE_EXISTS" ]; then
          echo "release_exists=true" >> $GITHUB_OUTPUT
          echo "release_id=$RELEASE_EXISTS" >> $GITHUB_OUTPUT
          echo "🔄 Release $TAG already exists (ID: $RELEASE_EXISTS)"
          echo "ℹ️  Will update existing release with new DMG"
        else
          echo "release_exists=false" >> $GITHUB_OUTPUT
          echo "✨ Release $TAG does not exist, will create new release"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create Release
      if: steps.find_dmg.outputs.dmg_exists == 'true' && steps.check_release.outputs.release_exists == 'false'
      id: create_release
      run: |
        TAG="${{ steps.find_dmg.outputs.tag }}"
        VERSION="${{ steps.find_dmg.outputs.version }}"
        DMG_FILE="${{ steps.find_dmg.outputs.dmg_file }}"
        
        # Create release with GitHub CLI
        gh release create "$TAG" "$DMG_FILE" \
          --title "SwiftGPT $VERSION" 
        
        echo "✅ Release $TAG created successfully!"
        echo "📦 DMG uploaded: $DMG_FILE"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update Existing Release
      if: steps.find_dmg.outputs.dmg_exists == 'true' && steps.check_release.outputs.release_exists == 'true'
      id: update_release
      run: |
        TAG="${{ steps.find_dmg.outputs.tag }}"
        VERSION="${{ steps.find_dmg.outputs.version }}"
        DMG_FILE="${{ steps.find_dmg.outputs.dmg_file }}"
        
        echo "🔄 Updating existing release $TAG with new DMG..."
        
        # First, delete the old DMG asset if it exists
        OLD_ASSETS=$(gh release view "$TAG" --json assets --jq '.assets[].name' | grep "SwiftGPT-.*\.dmg" || echo "")
        
        if [ -n "$OLD_ASSETS" ]; then
          echo "🗑️  Removing old DMG assets: $OLD_ASSETS"
          for asset in $OLD_ASSETS; do
            gh release delete-asset "$TAG" "$asset" --yes || echo "Asset $asset not found or already deleted"
          done
        fi
        
        # Upload the new DMG
        echo "📦 Uploading new DMG: $DMG_FILE"
        gh release upload "$TAG" "$DMG_FILE" --clobber
        
        # Update the release notes with current timestamp
        gh release edit "$TAG" --notes "## SwiftGPT $VERSION

### 🚀 What's New
- Bug fixes and improvements
- Performance optimizations
- Enhanced user experience

### 📥 Installation
1. Download the DMG file below
2. Open the DMG and drag SwiftGPT to your Applications folder  
3. Launch SwiftGPT from Applications

### 🔄 Auto-Updates
This version supports automatic updates through Sparkle. The app will check for updates automatically.

### 🔗 Update Feed
- **Appcast URL**: https://shakthi-sagar.github.io/swiftgpt-updates/appcast.xml
- **Repository**: https://github.com/shakthi-sagar/swiftgpt-updates

---

**Updated**: $(date '+%B %d, %Y at %H:%M UTC')

**Full Changelog**: https://github.com/shakthi-sagar/SwiftGPT/releases"
        
        echo "✅ Release $TAG updated successfully!"
        echo "📦 DMG replaced: $DMG_FILE"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Summary
      run: |
        if [ "${{ steps.find_dmg.outputs.dmg_exists }}" == "false" ]; then
          echo "❌ No DMG files found!"
          echo "💡 Make sure you have a SwiftGPT-*.dmg file in the repository"
          echo "📁 Current files:"
          ls -la
        elif [ "${{ steps.check_release.outputs.release_exists }}" == "true" ]; then
          if [ "${{ steps.update_release.conclusion }}" == "success" ]; then
            echo "🔄 Release v${{ steps.find_dmg.outputs.version }} updated successfully!"
            echo "📦 DMG replaced: ${{ steps.find_dmg.outputs.dmg_file }}"
            echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.find_dmg.outputs.version }}"
          else
            echo "❌ Failed to update release v${{ steps.find_dmg.outputs.version }}"
            echo "📦 DMG: ${{ steps.find_dmg.outputs.dmg_file }}"
            echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.find_dmg.outputs.version }}"
          fi
        else
          echo "✅ New release v${{ steps.find_dmg.outputs.version }} created successfully!"
          echo "📦 DMG uploaded: ${{ steps.find_dmg.outputs.dmg_file }}"
          echo "🌐 GitHub Pages will update automatically with the new appcast.xml"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.find_dmg.outputs.version }}"
        fi
